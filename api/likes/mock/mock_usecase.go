// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/api/likes (interfaces: LikeUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockLikeUsecase is a mock of LikeUsecase interface
type MockLikeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLikeUsecaseMockRecorder
}

// MockLikeUsecaseMockRecorder is the mock recorder for MockLikeUsecase
type MockLikeUsecaseMockRecorder struct {
	mock *MockLikeUsecase
}

// NewMockLikeUsecase creates a new mock instance
func NewMockLikeUsecase(ctrl *gomock.Controller) *MockLikeUsecase {
	mock := &MockLikeUsecase{ctrl: ctrl}
	mock.recorder = &MockLikeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLikeUsecase) EXPECT() *MockLikeUsecaseMockRecorder {
	return m.recorder
}

// Dislike mocks base method
func (m *MockLikeUsecase) Dislike(arg0 models.User, arg1 models.Dislike) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dislike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dislike indicates an expected call of Dislike
func (mr *MockLikeUsecaseMockRecorder) Dislike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dislike", reflect.TypeOf((*MockLikeUsecase)(nil).Dislike), arg0, arg1)
}

// Like mocks base method
func (m *MockLikeUsecase) Like(arg0 models.User, arg1 models.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like
func (mr *MockLikeUsecaseMockRecorder) Like(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockLikeUsecase)(nil).Like), arg0, arg1)
}

// MatchUser mocks base method
func (m *MockLikeUsecase) MatchUser(arg0 models.User, arg1 models.Like) (models.Chat, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchUser", arg0, arg1)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MatchUser indicates an expected call of MatchUser
func (mr *MockLikeUsecaseMockRecorder) MatchUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchUser", reflect.TypeOf((*MockLikeUsecase)(nil).MatchUser), arg0, arg1)
}

// Partner mocks base method
func (m *MockLikeUsecase) Partner(arg0 models.User, arg1 int) (models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partner", arg0, arg1)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Partner indicates an expected call of Partner
func (mr *MockLikeUsecaseMockRecorder) Partner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partner", reflect.TypeOf((*MockLikeUsecase)(nil).Partner), arg0, arg1)
}

// User mocks base method
func (m *MockLikeUsecase) User(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockLikeUsecaseMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockLikeUsecase)(nil).User), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/api/photos (interfaces: PhotoRepository)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockPhotoRepository is a mock of PhotoRepository interface
type MockPhotoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoRepositoryMockRecorder
}

// MockPhotoRepositoryMockRecorder is the mock recorder for MockPhotoRepository
type MockPhotoRepositoryMockRecorder struct {
	mock *MockPhotoRepository
}

// NewMockPhotoRepository creates a new mock instance
func NewMockPhotoRepository(ctrl *gomock.Controller) *MockPhotoRepository {
	mock := &MockPhotoRepository{ctrl: ctrl}
	mock.recorder = &MockPhotoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPhotoRepository) EXPECT() *MockPhotoRepositoryMockRecorder {
	return _m.recorder
}

// DeletePhoto mocks base method
func (_m *MockPhotoRepository) DeletePhoto(_param0 string, _param1 int) error {
	ret := _m.ctrl.Call(_m, "DeletePhoto", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhoto indicates an expected call of DeletePhoto
func (_mr *MockPhotoRepositoryMockRecorder) DeletePhoto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeletePhoto", reflect.TypeOf((*MockPhotoRepository)(nil).DeletePhoto), arg0, arg1)
}

// InsertPhoto mocks base method
func (_m *MockPhotoRepository) InsertPhoto(_param0 string, _param1 int) error {
	ret := _m.ctrl.Call(_m, "InsertPhoto", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPhoto indicates an expected call of InsertPhoto
func (_mr *MockPhotoRepositoryMockRecorder) InsertPhoto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InsertPhoto", reflect.TypeOf((*MockPhotoRepository)(nil).InsertPhoto), arg0, arg1)
}

// SelectImages mocks base method
func (_m *MockPhotoRepository) SelectImages(_param0 int) ([]string, error) {
	ret := _m.ctrl.Call(_m, "SelectImages", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectImages indicates an expected call of SelectImages
func (_mr *MockPhotoRepositoryMockRecorder) SelectImages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectImages", reflect.TypeOf((*MockPhotoRepository)(nil).SelectImages), arg0)
}

// SelectPhotoWithMask mocks base method
func (_m *MockPhotoRepository) SelectPhotoWithMask(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "SelectPhotoWithMask", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPhotoWithMask indicates an expected call of SelectPhotoWithMask
func (_mr *MockPhotoRepositoryMockRecorder) SelectPhotoWithMask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectPhotoWithMask", reflect.TypeOf((*MockPhotoRepository)(nil).SelectPhotoWithMask), arg0)
}

// SelectUserFeed mocks base method
func (_m *MockPhotoRepository) SelectUserFeed(_param0 string) (models.UserFeed, error) {
	ret := _m.ctrl.Call(_m, "SelectUserFeed", _param0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserFeed indicates an expected call of SelectUserFeed
func (_mr *MockPhotoRepositoryMockRecorder) SelectUserFeed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectUserFeed", reflect.TypeOf((*MockPhotoRepository)(nil).SelectUserFeed), arg0)
}

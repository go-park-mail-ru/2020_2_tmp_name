// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/api/photos (interfaces: PhotoUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockPhotoUsecase is a mock of PhotoUsecase interface
type MockPhotoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoUsecaseMockRecorder
}

// MockPhotoUsecaseMockRecorder is the mock recorder for MockPhotoUsecase
type MockPhotoUsecaseMockRecorder struct {
	mock *MockPhotoUsecase
}

// NewMockPhotoUsecase creates a new mock instance
func NewMockPhotoUsecase(ctrl *gomock.Controller) *MockPhotoUsecase {
	mock := &MockPhotoUsecase{ctrl: ctrl}
	mock.recorder = &MockPhotoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPhotoUsecase) EXPECT() *MockPhotoUsecaseMockRecorder {
	return m.recorder
}

// AddPhoto mocks base method
func (m *MockPhotoUsecase) AddPhoto(arg0 models.Photo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPhoto indicates an expected call of AddPhoto
func (mr *MockPhotoUsecaseMockRecorder) AddPhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPhoto", reflect.TypeOf((*MockPhotoUsecase)(nil).AddPhoto), arg0)
}

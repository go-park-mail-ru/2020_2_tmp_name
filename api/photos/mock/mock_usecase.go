// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/api/photos (interfaces: PhotoUsecase)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockPhotoUsecase is a mock of PhotoUsecase interface
type MockPhotoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoUsecaseMockRecorder
}

// MockPhotoUsecaseMockRecorder is the mock recorder for MockPhotoUsecase
type MockPhotoUsecaseMockRecorder struct {
	mock *MockPhotoUsecase
}

// NewMockPhotoUsecase creates a new mock instance
func NewMockPhotoUsecase(ctrl *gomock.Controller) *MockPhotoUsecase {
	mock := &MockPhotoUsecase{ctrl: ctrl}
	mock.recorder = &MockPhotoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPhotoUsecase) EXPECT() *MockPhotoUsecaseMockRecorder {
	return _m.recorder
}

// AddPhoto mocks base method
func (_m *MockPhotoUsecase) AddPhoto(_param0 models.Photo) error {
	ret := _m.ctrl.Call(_m, "AddPhoto", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPhoto indicates an expected call of AddPhoto
func (_mr *MockPhotoUsecaseMockRecorder) AddPhoto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddPhoto", reflect.TypeOf((*MockPhotoUsecase)(nil).AddPhoto), arg0)
}

// ClearPhotos mocks base method
func (_m *MockPhotoUsecase) ClearPhotos(_param0 string) error {
	ret := _m.ctrl.Call(_m, "ClearPhotos", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearPhotos indicates an expected call of ClearPhotos
func (_mr *MockPhotoUsecaseMockRecorder) ClearPhotos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClearPhotos", reflect.TypeOf((*MockPhotoUsecase)(nil).ClearPhotos), arg0)
}

// FindPhotoWithMask mocks base method
func (_m *MockPhotoUsecase) FindPhotoWithMask(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "FindPhotoWithMask", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPhotoWithMask indicates an expected call of FindPhotoWithMask
func (_mr *MockPhotoUsecaseMockRecorder) FindPhotoWithMask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindPhotoWithMask", reflect.TypeOf((*MockPhotoUsecase)(nil).FindPhotoWithMask), arg0)
}

// FindPhotoWithoutMask mocks base method
func (_m *MockPhotoUsecase) FindPhotoWithoutMask(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "FindPhotoWithoutMask", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPhotoWithoutMask indicates an expected call of FindPhotoWithoutMask
func (_mr *MockPhotoUsecaseMockRecorder) FindPhotoWithoutMask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindPhotoWithoutMask", reflect.TypeOf((*MockPhotoUsecase)(nil).FindPhotoWithoutMask), arg0)
}

// RemovePhoto mocks base method
func (_m *MockPhotoUsecase) RemovePhoto(_param0 string, _param1 int) error {
	ret := _m.ctrl.Call(_m, "RemovePhoto", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePhoto indicates an expected call of RemovePhoto
func (_mr *MockPhotoUsecaseMockRecorder) RemovePhoto(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemovePhoto", reflect.TypeOf((*MockPhotoUsecase)(nil).RemovePhoto), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/api/users (interfaces: UserRepository)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
	time "time"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckPremium mocks base method
func (m *MockUserRepository) CheckPremium(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPremium", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPremium indicates an expected call of CheckPremium
func (mr *MockUserRepositoryMockRecorder) CheckPremium(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPremium", reflect.TypeOf((*MockUserRepository)(nil).CheckPremium), arg0)
}

// CheckSuperLikeMe mocks base method
func (m *MockUserRepository) CheckSuperLikeMe(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSuperLikeMe", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckSuperLikeMe indicates an expected call of CheckSuperLikeMe
func (mr *MockUserRepositoryMockRecorder) CheckSuperLikeMe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSuperLikeMe", reflect.TypeOf((*MockUserRepository)(nil).CheckSuperLikeMe), arg0, arg1)
}

// CheckUser mocks base method
func (m *MockUserRepository) CheckUser(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUser indicates an expected call of CheckUser
func (mr *MockUserRepositoryMockRecorder) CheckUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockUserRepository)(nil).CheckUser), arg0)
}

// DeleteSession mocks base method
func (m *MockUserRepository) DeleteSession(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockUserRepositoryMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockUserRepository)(nil).DeleteSession), arg0)
}

// InsertPremium mocks base method
func (m *MockUserRepository) InsertPremium(arg0 int, arg1, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPremium", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPremium indicates an expected call of InsertPremium
func (mr *MockUserRepositoryMockRecorder) InsertPremium(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPremium", reflect.TypeOf((*MockUserRepository)(nil).InsertPremium), arg0, arg1, arg2)
}

// InsertSession mocks base method
func (m *MockUserRepository) InsertSession(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSession indicates an expected call of InsertSession
func (mr *MockUserRepositoryMockRecorder) InsertSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSession", reflect.TypeOf((*MockUserRepository)(nil).InsertSession), arg0, arg1)
}

// InsertUser mocks base method
func (m *MockUserRepository) InsertUser(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), arg0)
}

// Match mocks base method
func (m *MockUserRepository) Match(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match
func (mr *MockUserRepositoryMockRecorder) Match(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockUserRepository)(nil).Match), arg0, arg1)
}

// SelectImages mocks base method
func (m *MockUserRepository) SelectImages(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectImages", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectImages indicates an expected call of SelectImages
func (mr *MockUserRepositoryMockRecorder) SelectImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectImages", reflect.TypeOf((*MockUserRepository)(nil).SelectImages), arg0)
}

// SelectUserByID mocks base method
func (m *MockUserRepository) SelectUserByID(arg0 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByID", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByID indicates an expected call of SelectUserByID
func (mr *MockUserRepositoryMockRecorder) SelectUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByID", reflect.TypeOf((*MockUserRepository)(nil).SelectUserByID), arg0)
}

// SelectUserFeedByID mocks base method
func (m *MockUserRepository) SelectUserFeedByID(arg0 int) (models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserFeedByID", arg0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserFeedByID indicates an expected call of SelectUserFeedByID
func (mr *MockUserRepositoryMockRecorder) SelectUserFeedByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserFeedByID", reflect.TypeOf((*MockUserRepository)(nil).SelectUserFeedByID), arg0)
}

// SelectUsers mocks base method
func (m *MockUserRepository) SelectUsers(arg0 models.User) ([]models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsers", arg0)
	ret0, _ := ret[0].([]models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsers indicates an expected call of SelectUsers
func (mr *MockUserRepositoryMockRecorder) SelectUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsers", reflect.TypeOf((*MockUserRepository)(nil).SelectUsers), arg0)
}

// UpdateUser mocks base method
func (m *MockUserRepository) UpdateUser(arg0 models.User, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), arg0, arg1)
}

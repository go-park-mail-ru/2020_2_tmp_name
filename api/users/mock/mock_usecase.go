// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/api/users (interfaces: UserUsecase)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockUserUsecase is a mock of UserUsecase interface
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return _m.recorder
}

// Feed mocks base method
func (_m *MockUserUsecase) Feed(_param0 models.User) ([]models.UserFeed, error) {
	ret := _m.ctrl.Call(_m, "Feed", _param0)
	ret0, _ := ret[0].([]models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed
func (_mr *MockUserUsecaseMockRecorder) Feed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Feed", reflect.TypeOf((*MockUserUsecase)(nil).Feed), arg0)
}

// GetPremium mocks base method
func (_m *MockUserUsecase) GetPremium(_param0 int) error {
	ret := _m.ctrl.Call(_m, "GetPremium", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPremium indicates an expected call of GetPremium
func (_mr *MockUserUsecaseMockRecorder) GetPremium(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPremium", reflect.TypeOf((*MockUserUsecase)(nil).GetPremium), arg0)
}

// IsPremium mocks base method
func (_m *MockUserUsecase) IsPremium(_param0 int) bool {
	ret := _m.ctrl.Call(_m, "IsPremium", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPremium indicates an expected call of IsPremium
func (_mr *MockUserUsecaseMockRecorder) IsPremium(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsPremium", reflect.TypeOf((*MockUserUsecase)(nil).IsPremium), arg0)
}

// Login mocks base method
func (_m *MockUserUsecase) Login(_param0 models.LoginData) (string, error) {
	ret := _m.ctrl.Call(_m, "Login", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (_mr *MockUserUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), arg0)
}

// Logout mocks base method
func (_m *MockUserUsecase) Logout(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Logout", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (_mr *MockUserUsecaseMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Logout", reflect.TypeOf((*MockUserUsecase)(nil).Logout), arg0)
}

// Me mocks base method
func (_m *MockUserUsecase) Me(_param0 string) (models.UserFeed, error) {
	ret := _m.ctrl.Call(_m, "Me", _param0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me
func (_mr *MockUserUsecaseMockRecorder) Me(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Me", reflect.TypeOf((*MockUserUsecase)(nil).Me), arg0)
}

// Settings mocks base method
func (_m *MockUserUsecase) Settings(_param0 int, _param1 models.User) error {
	ret := _m.ctrl.Call(_m, "Settings", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Settings indicates an expected call of Settings
func (_mr *MockUserUsecaseMockRecorder) Settings(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Settings", reflect.TypeOf((*MockUserUsecase)(nil).Settings), arg0, arg1)
}

// Signup mocks base method
func (_m *MockUserUsecase) Signup(_param0 models.User) error {
	ret := _m.ctrl.Call(_m, "Signup", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup
func (_mr *MockUserUsecaseMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Signup", reflect.TypeOf((*MockUserUsecase)(nil).Signup), arg0)
}

// Telephone mocks base method
func (_m *MockUserUsecase) Telephone(_param0 string) bool {
	ret := _m.ctrl.Call(_m, "Telephone", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Telephone indicates an expected call of Telephone
func (_mr *MockUserUsecaseMockRecorder) Telephone(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Telephone", reflect.TypeOf((*MockUserUsecase)(nil).Telephone), arg0)
}

// User mocks base method
func (_m *MockUserUsecase) User(_param0 string) (models.User, error) {
	ret := _m.ctrl.Call(_m, "User", _param0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (_mr *MockUserUsecaseMockRecorder) User(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "User", reflect.TypeOf((*MockUserUsecase)(nil).User), arg0)
}

// UserID mocks base method
func (_m *MockUserUsecase) UserID(_param0 int) (models.UserFeed, error) {
	ret := _m.ctrl.Call(_m, "UserID", _param0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserID indicates an expected call of UserID
func (_mr *MockUserUsecaseMockRecorder) UserID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UserID", reflect.TypeOf((*MockUserUsecase)(nil).UserID), arg0)
}

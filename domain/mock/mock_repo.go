// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/domain (interfaces: UserRepository)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckChat mocks base method
func (m *MockUserRepository) CheckChat(arg0 models.Chat) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChat", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckChat indicates an expected call of CheckChat
func (mr *MockUserRepositoryMockRecorder) CheckChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChat", reflect.TypeOf((*MockUserRepository)(nil).CheckChat), arg0)
}

// CheckUser mocks base method
func (m *MockUserRepository) CheckUser(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUser indicates an expected call of CheckUser
func (mr *MockUserRepositoryMockRecorder) CheckUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockUserRepository)(nil).CheckUser), arg0)
}

// CheckUserBySession mocks base method
func (m *MockUserRepository) CheckUserBySession(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserBySession", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CheckUserBySession indicates an expected call of CheckUserBySession
func (mr *MockUserRepositoryMockRecorder) CheckUserBySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserBySession", reflect.TypeOf((*MockUserRepository)(nil).CheckUserBySession), arg0)
}

// DeleteSession mocks base method
func (m *MockUserRepository) DeleteSession(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockUserRepositoryMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockUserRepository)(nil).DeleteSession), arg0)
}

// InsertChat mocks base method
func (m *MockUserRepository) InsertChat(arg0 models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertChat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertChat indicates an expected call of InsertChat
func (mr *MockUserRepositoryMockRecorder) InsertChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertChat", reflect.TypeOf((*MockUserRepository)(nil).InsertChat), arg0)
}

// InsertComment mocks base method
func (m *MockUserRepository) InsertComment(arg0 models.Comment, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertComment indicates an expected call of InsertComment
func (mr *MockUserRepositoryMockRecorder) InsertComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertComment", reflect.TypeOf((*MockUserRepository)(nil).InsertComment), arg0, arg1)
}

// InsertDislike mocks base method
func (m *MockUserRepository) InsertDislike(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDislike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDislike indicates an expected call of InsertDislike
func (mr *MockUserRepositoryMockRecorder) InsertDislike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDislike", reflect.TypeOf((*MockUserRepository)(nil).InsertDislike), arg0, arg1)
}

// InsertLike mocks base method
func (m *MockUserRepository) InsertLike(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLike indicates an expected call of InsertLike
func (mr *MockUserRepositoryMockRecorder) InsertLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLike", reflect.TypeOf((*MockUserRepository)(nil).InsertLike), arg0, arg1)
}

// InsertMessage mocks base method
func (m *MockUserRepository) InsertMessage(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage
func (mr *MockUserRepositoryMockRecorder) InsertMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockUserRepository)(nil).InsertMessage), arg0, arg1, arg2)
}

// InsertPhoto mocks base method
func (m *MockUserRepository) InsertPhoto(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPhoto indicates an expected call of InsertPhoto
func (mr *MockUserRepositoryMockRecorder) InsertPhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhoto", reflect.TypeOf((*MockUserRepository)(nil).InsertPhoto), arg0, arg1)
}

// InsertSession mocks base method
func (m *MockUserRepository) InsertSession(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSession indicates an expected call of InsertSession
func (mr *MockUserRepositoryMockRecorder) InsertSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSession", reflect.TypeOf((*MockUserRepository)(nil).InsertSession), arg0, arg1)
}

// InsertUser mocks base method
func (m *MockUserRepository) InsertUser(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), arg0)
}

// Match mocks base method
func (m *MockUserRepository) Match(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match
func (mr *MockUserRepositoryMockRecorder) Match(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockUserRepository)(nil).Match), arg0, arg1)
}

// SelectChatByID mocks base method
func (m *MockUserRepository) SelectChatByID(arg0, arg1 int) (models.ChatData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectChatByID", arg0, arg1)
	ret0, _ := ret[0].(models.ChatData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectChatByID indicates an expected call of SelectChatByID
func (mr *MockUserRepositoryMockRecorder) SelectChatByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectChatByID", reflect.TypeOf((*MockUserRepository)(nil).SelectChatByID), arg0, arg1)
}

// SelectChatsByID mocks base method
func (m *MockUserRepository) SelectChatsByID(arg0 int) ([]models.ChatData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectChatsByID", arg0)
	ret0, _ := ret[0].([]models.ChatData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectChatsByID indicates an expected call of SelectChatsByID
func (mr *MockUserRepositoryMockRecorder) SelectChatsByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectChatsByID", reflect.TypeOf((*MockUserRepository)(nil).SelectChatsByID), arg0)
}

// SelectComments mocks base method
func (m *MockUserRepository) SelectComments(arg0 int) (models.CommentsById, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectComments", arg0)
	ret0, _ := ret[0].(models.CommentsById)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectComments indicates an expected call of SelectComments
func (mr *MockUserRepositoryMockRecorder) SelectComments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectComments", reflect.TypeOf((*MockUserRepository)(nil).SelectComments), arg0)
}

// SelectImages mocks base method
func (m *MockUserRepository) SelectImages(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectImages", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectImages indicates an expected call of SelectImages
func (mr *MockUserRepositoryMockRecorder) SelectImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectImages", reflect.TypeOf((*MockUserRepository)(nil).SelectImages), arg0)
}

// SelectMessage mocks base method
func (m *MockUserRepository) SelectMessage(arg0, arg1 int) (models.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMessage", arg0, arg1)
	ret0, _ := ret[0].(models.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMessage indicates an expected call of SelectMessage
func (mr *MockUserRepositoryMockRecorder) SelectMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMessage", reflect.TypeOf((*MockUserRepository)(nil).SelectMessage), arg0, arg1)
}

// SelectMessages mocks base method
func (m *MockUserRepository) SelectMessages(arg0 int) ([]models.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMessages", arg0)
	ret0, _ := ret[0].([]models.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMessages indicates an expected call of SelectMessages
func (mr *MockUserRepositoryMockRecorder) SelectMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMessages", reflect.TypeOf((*MockUserRepository)(nil).SelectMessages), arg0)
}

// SelectUser mocks base method
func (m *MockUserRepository) SelectUser(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser
func (mr *MockUserRepositoryMockRecorder) SelectUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockUserRepository)(nil).SelectUser), arg0)
}

// SelectUserByChat mocks base method
func (m *MockUserRepository) SelectUserByChat(arg0, arg1 int) (models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByChat", arg0, arg1)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByChat indicates an expected call of SelectUserByChat
func (mr *MockUserRepositoryMockRecorder) SelectUserByChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByChat", reflect.TypeOf((*MockUserRepository)(nil).SelectUserByChat), arg0, arg1)
}

// SelectUserByID mocks base method
func (m *MockUserRepository) SelectUserByID(arg0 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByID", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByID indicates an expected call of SelectUserByID
func (mr *MockUserRepositoryMockRecorder) SelectUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByID", reflect.TypeOf((*MockUserRepository)(nil).SelectUserByID), arg0)
}

// SelectUserFeed mocks base method
func (m *MockUserRepository) SelectUserFeed(arg0 string) (models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserFeed", arg0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserFeed indicates an expected call of SelectUserFeed
func (mr *MockUserRepositoryMockRecorder) SelectUserFeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserFeed", reflect.TypeOf((*MockUserRepository)(nil).SelectUserFeed), arg0)
}

// SelectUserMe mocks base method
func (m *MockUserRepository) SelectUserMe(arg0 string) (models.UserMe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserMe", arg0)
	ret0, _ := ret[0].(models.UserMe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserMe indicates an expected call of SelectUserMe
func (mr *MockUserRepositoryMockRecorder) SelectUserMe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserMe", reflect.TypeOf((*MockUserRepository)(nil).SelectUserMe), arg0)
}

// SelectUsers mocks base method
func (m *MockUserRepository) SelectUsers(arg0 models.User) ([]models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsers", arg0)
	ret0, _ := ret[0].([]models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsers indicates an expected call of SelectUsers
func (mr *MockUserRepositoryMockRecorder) SelectUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsers", reflect.TypeOf((*MockUserRepository)(nil).SelectUsers), arg0)
}

// UpdateUser mocks base method
func (m *MockUserRepository) UpdateUser(arg0 models.User, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/domain (interfaces: UserUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	http "net/http"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockUserUsecase is a mock of UserUsecase interface
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// AddPhoto mocks base method
func (m *MockUserUsecase) AddPhoto(arg0 models.Photo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPhoto indicates an expected call of AddPhoto
func (mr *MockUserUsecaseMockRecorder) AddPhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPhoto", reflect.TypeOf((*MockUserUsecase)(nil).AddPhoto), arg0)
}

// Chat mocks base method
func (m *MockUserUsecase) Chat(arg0 models.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chat indicates an expected call of Chat
func (mr *MockUserUsecaseMockRecorder) Chat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockUserUsecase)(nil).Chat), arg0)
}

// ChatID mocks base method
func (m *MockUserUsecase) ChatID(arg0 string, arg1 int) (models.ChatData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatID", arg0, arg1)
	ret0, _ := ret[0].(models.ChatData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatID indicates an expected call of ChatID
func (mr *MockUserUsecaseMockRecorder) ChatID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatID", reflect.TypeOf((*MockUserUsecase)(nil).ChatID), arg0, arg1)
}

// Chats mocks base method
func (m *MockUserUsecase) Chats(arg0 string) (models.ChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chats", arg0)
	ret0, _ := ret[0].(models.ChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chats indicates an expected call of Chats
func (mr *MockUserUsecaseMockRecorder) Chats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chats", reflect.TypeOf((*MockUserUsecase)(nil).Chats), arg0)
}

// Comment mocks base method
func (m *MockUserUsecase) Comment(arg0 string, arg1 models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Comment indicates an expected call of Comment
func (mr *MockUserUsecaseMockRecorder) Comment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockUserUsecase)(nil).Comment), arg0, arg1)
}

// CommentsByID mocks base method
func (m *MockUserUsecase) CommentsByID(arg0 int) (models.CommentsById, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsByID", arg0)
	ret0, _ := ret[0].(models.CommentsById)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentsByID indicates an expected call of CommentsByID
func (mr *MockUserUsecaseMockRecorder) CommentsByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsByID", reflect.TypeOf((*MockUserUsecase)(nil).CommentsByID), arg0)
}

// Dislike mocks base method
func (m *MockUserUsecase) Dislike(arg0 string, arg1 models.Dislike) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dislike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dislike indicates an expected call of Dislike
func (mr *MockUserUsecaseMockRecorder) Dislike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dislike", reflect.TypeOf((*MockUserUsecase)(nil).Dislike), arg0, arg1)
}

// Feed mocks base method
func (m *MockUserUsecase) Feed(arg0 string) ([]models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed", arg0)
	ret0, _ := ret[0].([]models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed
func (mr *MockUserUsecaseMockRecorder) Feed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockUserUsecase)(nil).Feed), arg0)
}

// Gochat mocks base method
func (m *MockUserUsecase) Gochat(arg0 string) (models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gochat", arg0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gochat indicates an expected call of Gochat
func (mr *MockUserUsecaseMockRecorder) Gochat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gochat", reflect.TypeOf((*MockUserUsecase)(nil).Gochat), arg0)
}

// Like mocks base method
func (m *MockUserUsecase) Like(arg0 string, arg1 models.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like
func (mr *MockUserUsecaseMockRecorder) Like(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockUserUsecase)(nil).Like), arg0, arg1)
}

// Login mocks base method
func (m *MockUserUsecase) Login(arg0 models.LoginData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), arg0)
}

// Logout mocks base method
func (m *MockUserUsecase) Logout(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockUserUsecaseMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserUsecase)(nil).Logout), arg0)
}

// Me mocks base method
func (m *MockUserUsecase) Me(arg0 string) (models.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Me", arg0)
	ret0, _ := ret[0].(models.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me
func (mr *MockUserUsecaseMockRecorder) Me(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Me", reflect.TypeOf((*MockUserUsecase)(nil).Me), arg0)
}

// Message mocks base method
func (m *MockUserUsecase) Message(arg0 string, arg1 models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Message indicates an expected call of Message
func (mr *MockUserUsecaseMockRecorder) Message(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockUserUsecase)(nil).Message), arg0, arg1)
}

// ServeWs mocks base method
func (m *MockUserUsecase) ServeWs(arg0 *models.Hub, arg1 http.ResponseWriter, arg2 *http.Request, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeWs", arg0, arg1, arg2, arg3)
}

// ServeWs indicates an expected call of ServeWs
func (mr *MockUserUsecaseMockRecorder) ServeWs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeWs", reflect.TypeOf((*MockUserUsecase)(nil).ServeWs), arg0, arg1, arg2, arg3)
}

// Settings mocks base method
func (m *MockUserUsecase) Settings(arg0 string, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Settings indicates an expected call of Settings
func (mr *MockUserUsecaseMockRecorder) Settings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockUserUsecase)(nil).Settings), arg0, arg1)
}

// Signup mocks base method
func (m *MockUserUsecase) Signup(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup
func (mr *MockUserUsecaseMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserUsecase)(nil).Signup), arg0)
}

// UploadAvatar mocks base method
func (m *MockUserUsecase) UploadAvatar() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar
func (mr *MockUserUsecaseMockRecorder) UploadAvatar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUserUsecase)(nil).UploadAvatar))
}

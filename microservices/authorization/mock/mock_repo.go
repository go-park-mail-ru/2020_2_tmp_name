// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/microservices/authorization (interfaces: AuthRepository)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockAuthRepository is a mock of AuthRepository interface
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CheckUser mocks base method
func (m *MockAuthRepository) CheckUser(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUser indicates an expected call of CheckUser
func (mr *MockAuthRepositoryMockRecorder) CheckUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockAuthRepository)(nil).CheckUser), arg0)
}

// CheckUserBySession mocks base method
func (m *MockAuthRepository) CheckUserBySession(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserBySession", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CheckUserBySession indicates an expected call of CheckUserBySession
func (mr *MockAuthRepositoryMockRecorder) CheckUserBySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserBySession", reflect.TypeOf((*MockAuthRepository)(nil).CheckUserBySession), arg0)
}

// DeleteSession mocks base method
func (m *MockAuthRepository) DeleteSession(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockAuthRepositoryMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthRepository)(nil).DeleteSession), arg0)
}

// InsertSession mocks base method
func (m *MockAuthRepository) InsertSession(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSession indicates an expected call of InsertSession
func (mr *MockAuthRepositoryMockRecorder) InsertSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSession", reflect.TypeOf((*MockAuthRepository)(nil).InsertSession), arg0, arg1)
}

// SelectImages mocks base method
func (m *MockAuthRepository) SelectImages(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectImages", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectImages indicates an expected call of SelectImages
func (mr *MockAuthRepositoryMockRecorder) SelectImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectImages", reflect.TypeOf((*MockAuthRepository)(nil).SelectImages), arg0)
}

// SelectUser mocks base method
func (m *MockAuthRepository) SelectUser(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser
func (mr *MockAuthRepositoryMockRecorder) SelectUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockAuthRepository)(nil).SelectUser), arg0)
}

// SelectUserBySession mocks base method
func (m *MockAuthRepository) SelectUserBySession(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserBySession", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserBySession indicates an expected call of SelectUserBySession
func (mr *MockAuthRepositoryMockRecorder) SelectUserBySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserBySession", reflect.TypeOf((*MockAuthRepository)(nil).SelectUserBySession), arg0)
}

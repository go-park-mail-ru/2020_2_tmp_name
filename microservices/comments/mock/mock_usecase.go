// Code generated by MockGen. DO NOT EDIT.
// Source: park_2020/2020_2_tmp_name/microservices/comments (interfaces: CommentUsecase)

package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "park_2020/2020_2_tmp_name/models"
	reflect "reflect"
)

// MockCommentUsecase is a mock of CommentUsecase interface
type MockCommentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUsecaseMockRecorder
}

// MockCommentUsecaseMockRecorder is the mock recorder for MockCommentUsecase
type MockCommentUsecaseMockRecorder struct {
	mock *MockCommentUsecase
}

// NewMockCommentUsecase creates a new mock instance
func NewMockCommentUsecase(ctrl *gomock.Controller) *MockCommentUsecase {
	mock := &MockCommentUsecase{ctrl: ctrl}
	mock.recorder = &MockCommentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCommentUsecase) EXPECT() *MockCommentUsecaseMockRecorder {
	return _m.recorder
}

// Comment mocks base method
func (_m *MockCommentUsecase) Comment(_param0 context.Context, _param1 models.User, _param2 models.Comment) error {
	ret := _m.ctrl.Call(_m, "Comment", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Comment indicates an expected call of Comment
func (_mr *MockCommentUsecaseMockRecorder) Comment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Comment", reflect.TypeOf((*MockCommentUsecase)(nil).Comment), arg0, arg1, arg2)
}

// CommentsByID mocks base method
func (_m *MockCommentUsecase) CommentsByID(_param0 context.Context, _param1 int) (models.CommentsData, error) {
	ret := _m.ctrl.Call(_m, "CommentsByID", _param0, _param1)
	ret0, _ := ret[0].(models.CommentsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentsByID indicates an expected call of CommentsByID
func (_mr *MockCommentUsecaseMockRecorder) CommentsByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CommentsByID", reflect.TypeOf((*MockCommentUsecase)(nil).CommentsByID), arg0, arg1)
}

// User mocks base method
func (_m *MockCommentUsecase) User(_param0 context.Context, _param1 string) (models.User, error) {
	ret := _m.ctrl.Call(_m, "User", _param0, _param1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (_mr *MockCommentUsecaseMockRecorder) User(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "User", reflect.TypeOf((*MockCommentUsecase)(nil).User), arg0, arg1)
}
